import anndata as ad
import scvi 
import cellmapper as cm
from scipy.sparse import csc_matrix

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
    'input_train_mod1': 'resources_test/task_predict_modality/openproblems_neurips2021/bmmc_cite/normal/train_mod1.h5ad',
    'input_train_mod2': 'resources_test/task_predict_modality/openproblems_neurips2021/bmmc_cite/normal/train_mod2.h5ad',
    'input_test_mod1': 'resources_test/task_predict_modality/openproblems_neurips2021/bmmc_cite/normal/test_mod1.h5ad',
    'output': 'output.h5ad',
    'num_hvg': 2000,
    'n_latent': 30,
    'n_hidden': 128,
    'n_layers': 2,
    'n_neighbors': 30, 
    'kernel_method': 'hnoca',

}
meta = {
  'name': 'cellmapper_scvi',
}
## VIASH END

print('Reading input files', flush=True)
input_train_mod1 = ad.read_h5ad(par['input_train_mod1'])
input_train_mod2 = ad.read_h5ad(par['input_train_mod2'])
input_test_mod1 = ad.read_h5ad(par['input_test_mod1'])

print('Preprocess data', flush=True)
if par["num_hvg"]:
    print("Subsetting to HVG", flush=True)
    hvg_idx = input_train_mod1.var['hvg_score'].to_numpy().argsort()[:par["num_hvg"]]
    input_train_mod1 = input_train_mod1[:,hvg_idx]
    input_test_mod1 = input_test_mod1[:,hvg_idx]

# could use mudata here as well
input_train_mod1.obsm["mod2"] = input_train_mod2.layers["normalized"] 

print("Concatenating train and test data", flush=True)
adata = ad.concat(
    [input_train_mod1, input_test_mod1], merge = "same", label="split", keys=["train", "test"]
    )

print('Create and train SCVI model', flush=True)
scvi.model.SCVI.setup_anndata(adata, batch_key="batch", layer="counts")

model_kwargs = {
    key: par[key]
    for key in ["n_latent", "n_hidden", "n_layers"]
    if par[key] is not None
}

model = scvi.model.SCVI(adata, **model_kwargs)
model.train(early_stopping=True)
adata.obsm["X_scvi"] = model.get_latent_representation()

# Place the representation back into individual objects
input_train_mod1.obsm["X_scvi"] = adata[adata.obs["split"] == "train"].obsm["X_scvi"].copy()
input_test_mod1.obsm["X_scvi"] = adata[adata.obs["split"] == "test"].obsm["X_scvi"].copy()


print('Setup and prepare Cellmapper', flush=True)
cmap = cm.CellMapper(query=input_test_mod1, reference=input_train_mod1)
cmap.compute_neighbors(
    use_rep="X_scvi",
    n_neighbors=par['n_neighbors'], 
    )
cmap.compute_mapping_matrix(kernel_method=par['kernel_method'])

print("Predict on test data", flush=True)
cmap.map_obsm(key="mod2", prediction_postfix="pred")
mod2_pred = csc_matrix(cmap.query.obsm["mod2_pred"])

print("Write output AnnData to file", flush=True)
output = ad.AnnData(
    layers={"normalized": mod2_pred},
    obs=input_test_mod1.obs,
    var=input_train_mod2.var,
    uns={
        'dataset_id': input_train_mod1.uns['dataset_id'],
        'method_id': meta["name"],
    },
)
output.write_h5ad(par['output'], compression='gzip')
